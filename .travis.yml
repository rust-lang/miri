language: generic
cache:
  # Cache the global cargo directory, but NOT the local `target` directory which
  # we cannot reuse anyway when the nightly changes (and it grows quite large
  # over time).
  directories:
    - /home/travis/.cargo

os:
- linux
- osx

before_script:
# mac os weirdness (https://github.com/travis-ci/travis-ci/issues/6307)
- rvm get stable
# Compute the rust version we use. We do not use "language: rust" to have more control here.
- |
  if [ "$TRAVIS_EVENT_TYPE" = cron ]; then
    RUST_TOOLCHAIN=nightly
  else
    RUST_TOOLCHAIN=$(cat rust-version)
  fi
# install Rust
- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain "$RUST_TOOLCHAIN"
- export PATH=$HOME/.cargo/bin:$PATH
- rustc --version
# customize installation
- rustup target add i686-unknown-linux-gnu
- rustup target add i686-pc-windows-gnu
- rustup target add i686-pc-windows-msvc
- rustup component add rust-src
- cargo install xargo || echo "Skipping xargo install"

script:
- set -e
- |
  # Test and install plain miri
  cargo build --release --all-features &&
  #cargo test --release --all-features &&
  cargo install --all-features --force --path .
- |
  # get ourselves a MIR-full libstd
  xargo/build.sh &&
  export MIRI_SYSROOT=~/.xargo/HOST
#- |
#  # run all tests with full mir
#  cargo test --release --all-features
- |
  # Test cargo integration
  cd cargo-miri-test &&
  # Test `cargo miri`
    # We ignore the exit code because we want to see the output even on failure, and
    # I found no way to preserve the exit code so that we can test for it later.
    # Variables set in this subshell in the parenthesis are not available
    # on the outside.
    # We assume that if this fails, it'll also print something about the failure on
    # stdout/stderr and we'll catch that.
    # FIXME: Disabling validation, still investigating whether there is UB here
    (cargo miri -q >stdout.real 2>stderr.real -- -Zmiri-disable-validation || true) &&
    # Print file names and contents (`cat` would just print contents)
    tail -n +0 stdout.real stderr.real &&
    # Verify output
    diff -u stdout.ref stdout.real &&
    diff -u stderr.ref stderr.real &&
  # test `cargo miri test`
    cargo miri test &&
  cd ..

notifications:
  email:
    on_success: never
branches:
  only:
  - master
env:
  global:
  - RUST_TEST_NOCAPTURE=1
