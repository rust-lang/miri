error: Undefined Behavior: Data race detected between (1) non-atomic read on thread `main` and (2) retag write of type `i32` on thread `unnamed-ID` at ALLOC
  --> tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC
   |
LL | ...   retag(unsafe { &mut *ptr.0 });
   |                      ^^^^^^^^^^^ (2) just happened here
   |
help: and (1) occurred earlier here
  --> tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC
   |
LL |     unsafe { ptr.0.read() };
   |              ^^^^^^^^^^^^
   = help: retags occur on all (re)borrows and as well as when references are copied or moved
   = help: retags permit optimizations that insert speculative reads or writes
   = help: therefore from the perspective of data races, a retag has the same implications as a read or write
   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior
   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC
   = note: thread `unnamed-ID` was spawned by thread `main`
   = note: inside `std::sys::pal::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/pal/PLATFORM/thread.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked_::<'_, {closure@tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked::<{closure@tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn::<{closure@tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::spawn::<{closure@tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
note: inside `main`
  --> tests/fail/stacked_borrows/retag_data_race_protected_read.rs:LL:CC
   |
LL |       let t = thread::spawn(move || {
   |  _____________^
LL | |         let ptr = ptr;
LL | |         // We do a protected mutable retag (but no write!) in this thread.
LL | |         fn retag(_x: &mut i32) {}
LL | |         retag(unsafe { &mut *ptr.0 });
LL | |     });
   | |______^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

