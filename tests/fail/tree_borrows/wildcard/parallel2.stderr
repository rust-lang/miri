warning: integer-to-pointer cast
  --> tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC
   |
LL |     let wild = int1 as *mut u32;
   |                ^^^^^^^^^^^^^^^^ integer-to-pointer cast
   |
   = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program
   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation
   = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead
   = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics
   = help: Tree Borrows does not support integer-to-pointer casts, so the program is likely to go wrong when this pointer gets used
   = note: BACKTRACE:
   = note: inside `main` at tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC

error: Undefined Behavior: read access through <TAG> at ALLOC[0x0] is forbidden
  --> tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC
   |
LL |     let fail = *ref3;
   |                ^^^^^ Undefined Behavior occurred here
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/tree-borrows.md for further information
   = help: the accessed tag <TAG> has state Disabled which forbids this child read access
help: the accessed tag <TAG> was created here, in the initial state Reserved
  --> tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC
   |
LL |     let ref3 = unsafe { &mut *ptr_base };
   |                         ^^^^^^^^^^^^^^
help: the accessed tag <TAG> later transitioned to Disabled due to a foreign write access at offsets [0x0..0x4]
  --> tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC
   |
LL |     unsafe { wild.write(13) };
   |              ^^^^^^^^^^^^^^
   = help: this transition corresponds to a loss of read and write permissions
   = note: BACKTRACE (of the first span):
   = note: inside `main` at tests/fail/tree_borrows/wildcard/parallel2.rs:LL:CC

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error; 1 warning emitted

