Thread 1 executing: start
Thread 2 executing: start
Thread 2 executing: retag x (&mut, protect)
Thread 1 executing: retag x (&mut, protect)
Thread 1 executing: [lazy] retag y (&mut, protect, IM)
Thread 2 executing: [lazy] retag y (&mut, protect, IM)
Thread 2 executing: spurious write x
Thread 1 executing: spurious write x (executed)
Thread 1 executing: ret y
Thread 2 executing: ret y
Thread 2 executing: ret x
Thread 1 executing: ret x
Thread 1 executing: write y
Thread 2 executing: write y
error: Undefined Behavior: write access through <TAG> at ALLOC[0x0] is forbidden
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |         unsafe { *y = 13 }
   |                  ^^^^^^^ Undefined Behavior occurred here
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: the accessed tag <TAG> has state Disabled which forbids this child write access
help: the accessed tag <TAG> was created here, in the initial state Reserved
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |         fn inner(y: &mut Cell<()>, b: IdxBarrier) -> *mut u8 {
   |                  ^
help: the accessed tag <TAG> later transitioned to Disabled due to a foreign write access at offsets [0x0..0x1]
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |                 *x = 64;
   |                 ^^^^^^^
   = help: this transition corresponds to a loss of read and write permissions
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   = note: thread `unnamed-ID` was spawned by thread `main`
   = note: inside `std::sys::pal::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/pal/PLATFORM/thread.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked_::<'_, {closure@tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked::<{closure@tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn::<{closure@tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::spawn::<{closure@tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
note: inside `main`
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |       let thread_2 = thread::spawn(move || {
   |  ____________________^
LL | |         let b = (2, by);
LL | |         synchronized!(b, "start");
LL | |         let ptr = ptr;
...  |
LL | |         synchronized!(b, "end");
LL | |     });
   | |______^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

