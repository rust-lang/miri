error: Undefined Behavior: memory access failed: ALLOC has been freed, so this pointer is dangling
  --> tests/fail/data_race/dealloc_read_race2.rs:LL:CC
   |
LL |             *ptr.0
   |             ^^^^^^ Undefined Behavior occurred here
   |
   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior
   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information
help: ALLOC was allocated here:
  --> tests/fail/data_race/dealloc_read_race2.rs:LL:CC
   |
LL |     let pointer: *mut usize = Box::into_raw(Box::new(0usize));
   |                                             ^^^^^^^^^^^^^^^^
help: ALLOC was deallocated here:
  --> tests/fail/data_race/dealloc_read_race2.rs:LL:CC
   |
LL | /             __rust_dealloc(
LL | |                 ptr.0 as *mut _,
LL | |                 std::mem::size_of::<usize>(),
LL | |                 std::mem::align_of::<usize>(),
LL | |             )
   | |_____________^
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/data_race/dealloc_read_race2.rs:LL:CC
   = note: thread `unnamed-ID` was spawned by thread `main`
   = note: inside `std::sys::pal::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/pal/PLATFORM/thread.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked_::<'_, {closure@tests/fail/data_race/dealloc_read_race2.rs:LL:CC}, usize>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked::<{closure@tests/fail/data_race/dealloc_read_race2.rs:LL:CC}, usize>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn::<{closure@tests/fail/data_race/dealloc_read_race2.rs:LL:CC}, usize>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::spawn::<{closure@tests/fail/data_race/dealloc_read_race2.rs:LL:CC}, usize>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
note: inside `main`
  --> tests/fail/data_race/dealloc_read_race2.rs:LL:CC
   |
LL |   ...   let j2 = spawn(move || {
   |  ________________^
LL | | ...       let ptr = ptr; // avoid field capturing
LL | | ...       // Also an error of the form: Data race detected between (1) deallocation on thread `unnamed-ID` and (2) non-atomic read on thr...
LL | | ...       // but the invalid allocation is detected first.
LL | | ...       *ptr.0
LL | | ...   });
   | |________^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

