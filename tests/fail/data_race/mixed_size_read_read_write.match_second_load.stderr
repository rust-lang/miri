error: Undefined Behavior: Race condition detected between (1) multiple differently-sized atomic loads, including one load on thread `unnamed-ID` and (2) 1-byte atomic store on thread `unnamed-ID` at ALLOC
  --> tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC
   |
LL |                 a8[0].store(0, Ordering::SeqCst);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (2) just happened here
   |
help: and (1) occurred earlier here
  --> tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC
   |
LL |             a16.load(Ordering::SeqCst);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: overlapping unsynchronized atomic accesses must use the same access size
   = help: see https://doc.rust-lang.org/nightly/std/sync/atomic/index.html#memory-model-for-atomic-accesses for more information about the Rust memory model
   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior
   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC
   = note: thread `unnamed-ID` was spawned by thread `main`
   = note: inside `std::sys::pal::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/pal/PLATFORM/thread.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked_::<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::scoped::<impl std::thread::Builder>::spawn_scoped::<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/scoped.rs:LL:CC
   = note: inside `std::thread::Scope::<'_, '_>::spawn::<{closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>` at RUSTLIB/std/src/thread/scoped.rs:LL:CC
note: inside closure
  --> tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC
   |
LL | /         s.spawn(|| {
LL | |             thread::yield_now(); // make sure this happens last
LL | |             if cfg!(match_first_load) {
LL | |                 a16.store(0, Ordering::SeqCst);
...  |
LL | |             }
LL | |         });
   | |__________^
   = note: inside closure at RUSTLIB/std/src/thread/scoped.rs:LL:CC
   = note: inside `<std::panic::AssertUnwindSafe<{closure@std::thread::scope<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>::{closure#0}}> as std::ops::FnOnce<()>>::call_once` at RUSTLIB/core/src/panic/unwind_safe.rs:LL:CC
   = note: inside `std::panicking::r#try::do_call::<std::panic::AssertUnwindSafe<{closure@std::thread::scope<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>::{closure#0}}>, ()>` at RUSTLIB/std/src/panicking.rs:LL:CC
   = note: inside `std::panicking::r#try::<(), std::panic::AssertUnwindSafe<{closure@std::thread::scope<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>::{closure#0}}>>` at RUSTLIB/std/src/panicking.rs:LL:CC
   = note: inside `std::panic::catch_unwind::<std::panic::AssertUnwindSafe<{closure@std::thread::scope<'_, {closure@tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC}, ()>::{closure#0}}>, ()>` at RUSTLIB/std/src/panic.rs:LL:CC
note: inside `main`
  --> tests/fail/data_race/mixed_size_read_read_write.rs:LL:CC
   |
LL | /     thread::scope(|s| {
LL | |         s.spawn(|| {
LL | |             a16.load(Ordering::SeqCst);
LL | |         });
...  |
LL | |         });
LL | |     });
   | |______^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

