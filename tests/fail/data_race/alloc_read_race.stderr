error: Undefined Behavior: Data race detected between (1) creating a new allocation on thread `unnamed-ID` and (2) non-atomic read on thread `unnamed-ID` at ALLOC
  --> tests/fail/data_race/alloc_read_race.rs:LL:CC
   |
LL | ...   *pointer.load(Ordering::Relaxed)
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (2) just happened here
   |
help: and (1) occurred earlier here
  --> tests/fail/data_race/alloc_read_race.rs:LL:CC
   |
LL |             pointer.store(Box::into_raw(Box::new_uninit()), Ordering::Relaxed);
   |                                         ^^^^^^^^^^^^^^^^^
   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior
   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/data_race/alloc_read_race.rs:LL:CC
   = note: thread `unnamed-ID` was spawned by thread `main`
   = note: inside `std::sys::pal::PLATFORM::thread::Thread::new` at RUSTLIB/std/src/sys/pal/PLATFORM/thread.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked_::<'_, {closure@tests/fail/data_race/alloc_read_race.rs:LL:CC}, std::mem::MaybeUninit<usize>>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn_unchecked::<{closure@tests/fail/data_race/alloc_read_race.rs:LL:CC}, std::mem::MaybeUninit<usize>>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::Builder::spawn::<{closure@tests/fail/data_race/alloc_read_race.rs:LL:CC}, std::mem::MaybeUninit<usize>>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
   = note: inside `std::thread::spawn::<{closure@tests/fail/data_race/alloc_read_race.rs:LL:CC}, std::mem::MaybeUninit<usize>>` at RUSTLIB/std/src/thread/mod.rs:LL:CC
note: inside `main`
  --> tests/fail/data_race/alloc_read_race.rs:LL:CC
   |
LL |   ...   let j2 = spawn(move || {
   |  ________________^
LL | | ...       let ptr = ptr; // avoid field capturing
LL | | ...       let pointer = &*ptr.0;
...  |
LL | | ...       *pointer.load(Ordering::Relaxed)
LL | | ...   });
   | |________^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

